
step 1  生成 私钥

# openssl genrsa -des3 -out encripted_rsa_private.key 1024
''
Generating RSA private key, 1024 bit long modulus
............++++++
..++++++
e is 65537 (0x10001)
Enter pass phrase for encripted_rsa_private.key:
Verifying - Enter pass phrase for encripted_rsa_private.key:
''

# openssl rsa -in encripted_rsa_private.key -out  rsa_private.key

''
Enter pass phrase for encripted_rsa_private.key:
writing RSA key
''

rsa_private.key是RSA的私钥
encripted_rsa_private.key是用des3对rsa的私钥再进行一次加密
所以，前面两个命令也可以用一步操作完成
openssl genrsa -out private.key 1024 


step 2  生成 证书请求

# openssl req -new -key rsa_private.key -out ssl.csr

''
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:cn
State or Province Name (full name) []:sh
Locality Name (eg, city) [Default City]:sh
Organization Name (eg, company) [Default Company Ltd]:ucloud   
Organizational Unit Name (eg, section) []:ufile
Common Name (eg, your name or your server's hostname) []:*.ufile.ucloud.cn                                          
Email Address []:admin@ucloud.cn

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:ufile.ucloud.cn
An optional company name []:ucloud

''


step 3 生成 证书
# openssl x509 -req -days 365 -in ssl.csr -signkey rsa_private.key -out ssl.crt

''
Signature ok
subject=/C=cn/ST=sh/L=sh/O=ucloud/OU=ufile/CN=*.ufile.ucloud.cn/emailAddress=admin@ucloud.cn
Getting Private key
''



请求SSL提供商签发证书
http://www.cnblogs.com/you-jia/p/4334566.html
(将CA的证书 附在 自己证书的下面）
证书链的问题
http://www.cnblogs.com/chjbbs/p/5748369.html

模拟CA签发证书
http://blog.creke.net/762.html
http://www.2cto.com/article/201305/207363.html



优化示例
http://blog.csdn.net/wzy_1988/article/details/8522511

ssl_session_cache shared:SSL:10m;
#客户端能够重复使用存储在缓存中的会话参数时间 
ssl_session_timeout 300;

```
语法：ssl_session_cache off|none|builtin:size|shared:name:size
使用环境：main,server
缓存类型:
off -- 硬关闭，nginx明确告诉客户端这个会话不可重用
none -- 软关闭，nginx告诉客户端会话能够被重用，但是nginx实际上不会重用它们
bultin -- openssl内置缓存，仅可用于一个工作进程.可能导致内存碎片
shared -- 所有工作进程的共享缓存。（1）缓存大小用字节数指定（2）每个缓存必须拥有自己的名称（3）同名的缓存可用于多个虚拟主机
```
